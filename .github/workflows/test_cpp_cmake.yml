name: Test C++ programs

on:
  push:
    paths-ignore:
    - 'epi_judge_java*/**'
    - 'epi_judge_python*/**'
    - 'html/**'
  pull_request:
    paths-ignore:
    - 'epi_judge_java*/**'
    - 'epi_judge_python*/**'
    - 'html/**'

env:
  BUILD_TYPE: Debug

jobs:
  fast_test:
    name: Fast Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        mode: [stub, solution]
        include:
          - mode: stub
            folder: epi_judge_cpp
          - mode: solution
            folder: epi_judge_cpp_solutions
            
    steps:
    - uses: actions/checkout@v1

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install click

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE/${{matrix.folder}} -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE -- -j 8

    - name: Test
      shell: bash
      run: python epijudge_ci_test_tool.py --build-dir ${{runner.workspace}}/build cpp ${{matrix.mode}} .

  full_test:
    name: Full Test
    needs: fast_test
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'pull_request'

    strategy:
      max-parallel: 2
      matrix:
        os: [windows-latest, macOS-latest]
        mode: [stub, solution]
        include:
          - mode: stub
            folder: epi_judge_cpp
          - mode: solution
            folder: epi_judge_cpp_solutions
            
    steps:
    - uses: actions/checkout@v1

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install click

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE/${{matrix.folder}} -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      if: runner.os == 'macOS'
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE -- -j 8

    - name: Build Windows
      # Windows doesn't support -j switch
      if: runner.os == 'Windows'
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE --

    - name: Test
      # Mac build should be identical to ubuntu, skip to save resources
      if: runner.os == 'Windows'
      shell: bash
      run: python epijudge_ci_test_tool.py --build-dir ${{runner.workspace}}/build cpp ${{matrix.mode}} .
